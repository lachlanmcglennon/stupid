import socket
import sys
import selectors

sel = selectors.DefaultSelector()

def start_connection(server_address, port):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.setblocking(False)
    sock.connect_ex((server_address, port))  # Non-blocking connect
    sel.register(sock, selectors.EVENT_READ, receive_message)
    return sock

def receive_message(sock):
    try:
        data = sock.recv(1024).decode('utf-8')
        if data:
            if data.startswith("LOGIN:"):
                handle_login_response(data)
            elif data.startswith("REGISTER:"):
                handle_register_response(data)
            elif data.startswith("ROOMLIST:"):
                handle_roomlist_response(data)
            elif data.startswith("CREATE:"):
                handle_create_response(data)
            elif data.startswith("JOIN:"):
                handle_join_response(data)
            elif data.startswith("BOARDSTATUS:"):
                handle_boardstatus(data)
            elif data.startswith("GAMEEND:"):
                handle_gameend(data)
            else:
                print("Unknown message received from server. Exiting...")
                sys.exit(1)
    except BlockingIOError:
        pass  # Nothing to read

def handle_user_input(sock):
    user_input = sys.stdin.readline().strip()
    if user_input.upper() == "QUIT":
        print("Exiting...")
        sel.unregister(sock)
        sock.close()
        sys.exit(0)
    elif user_input.upper() == "LOGIN":
        username = input("Enter username: ")
        password = input("Enter password: ")
        send_message(sock, f"LOGIN:{username}:{password}")
    elif user_input.upper() == "REGISTER":
        username = input("Enter username: ")
        if len(username) > 20:
            print("Error: username length limitation is 20 characters.")
            return
        password = input("Enter password: ")
        if len(password) > 20:
            print("Error: password length limitation is 20 characters.")
            return
        send_message(sock, f"REGISTER:{username}:{password}")
    elif user_input.upper() == "ROOMLIST":
        mode = input("Do you want to have a room list as player or viewer? (Player/Viewer): ").strip().lower()
        if mode not in ["player", "viewer"]:
            print("Error: Please input a valid mode.")
            return
        send_message(sock, f"ROOMLIST:{mode.capitalize()}")
    elif user_input.upper() == "CREATE":
        room_name = input("Enter room name you want to create: ").strip()
        send_message(sock, f"CREATE:{room_name}")
    elif user_input.upper() == "JOIN":
        room_name = input("Enter room name you want to join: ").strip()
        mode = input("You wish to join the room as: (Player/Viewer): ").strip().lower()
        if mode not in ["player", "viewer"]:
            print("Unknown input.")
            return
        send_message(sock, f"JOIN:{room_name}:{mode.capitalize()}")
    elif user_input.upper() == "PLACE":
        try:
            col = int(input("Enter column (0-2): "))
            row = int(input("Enter row (0-2): "))
            if not (0 <= col <= 2) or not (0 <= row <= 2):
                print("Column/Row values must be an integer between 0 and 2.")
                return
            send_message(sock, f"PLACE:{col}:{row}")
        except ValueError:
            print("Column/Row values must be an integer between 0 and 2.")
    elif user_input.upper() == "FORFEIT":
        send_message(sock, "FORFEIT")
    else:
        print(f"Unknown command: {user_input.upper()}")

def send_message(sock, message):
    try:
        sock.sendall(message.encode('utf-8'))
    except Exception as e:
        print(f"Error sending message: {e}")
        sys.exit(1)

def client_main():
    if len(sys.argv) != 3:
        print("Error: Expecting 2 arguments: <server address> <port>")
        sys.exit(1)

    server_address = sys.argv[1]
    port = int(sys.argv[2])

    try:
        sock = start_connection(server_address, port)
        print(f"Connected to server at {server_address}:{port}")
    except Exception as e:
        print(f"Error: cannot connect to server at {server_address} and {port}.")
        sys.exit(1)

    sel.register(sys.stdin, selectors.EVENT_READ, lambda x: handle_user_input(sock))

    while True:
        events = sel.select()
        for key, _ in events:
            callback = key.data
            callback(key.fileobj)

if __name__ == "__main__":
    client_main()

